// Kevin Language
// ==============

{
  function buildBinaryExpression(head, tail) {
    return tail.reduce((result, element) => ({
      type: element[1],
      staticType: result.type == element[3].type ? result.type : null,
      left: result,
      right: element[3]
    }), head);
  }
  function typifyScope(scope, variables) {
    return scope;
  }
}

Program
  = _ imports:Import* _ globals:GlobalStatement* _ exportBlock:ExportBlock? _ {
    return { imports, globals, exports: exportBlock || [] }
  }

#include "import"
#include "global_statement"
#include "export"

_ "whitespace"
  = [ \t\n\r]*

__ "forced whitespace"
  = [ \t\n\r]*
